#! /bin/bash

# Copyright (c) 2014 Sandstorm Development Group, Inc. and contributors
# Licensed under the MIT License:
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# This script wrap's Sandstorm's `spk` tool and adds convenience functionality
# specific to Meteor apps. See the readme for more info.
# This script gathers all of the binaries and libraries needed to run Meteor,
# but which aren't part of a normal Meteor bundle.
#
# We pull Node.js from the Meteor tools installation. We also pull mongod from
# the meteor tools installation.  We no longer build a custom version of
# MongoDB since the flags to build the smaller version have been removed.
#
# (It would be nice to replace Mongo entirely with an in-process database; maybe
# based on Meteor's own "minimongo"...)
#
# We pull any needed libraries straight from the local system.
#
# So the strategy is to use exactly the same tools as were used to
# run the Meteor app in development mode. We gather them into the bundle,
# build Meteor, then apply spk.
#

set -euo pipefail

SOURCE_DIR=$(dirname "${BASH_SOURCE[0]}")
DEPS_DIR=.meteor-spk/deps
METEOR_WAREHOUSE_DIR="${METEOR_WAREHOUSE_DIR:-$HOME/.meteor}"


if [ ! -x "$METEOR_WAREHOUSE_DIR/meteor" ]; then
  echo "Couldn't find Meteor installation. Please install Meteor." >&2
  exit 1
fi

#
# The purpose is to use the EXACT same binaries that the specific meteor project
# uses to run in development mode. It may not be ideal, but it *does* run.
#

METEOR_RELEASE=$(<.meteor/release)
TOOL_VERSION=$(meteor show --ejson $METEOR_RELEASE | grep '^ *"tool":' |
      sed -re 's/^.*"(meteor-tool@[^"]*)".*$/\1/g')
TOOLDIR=$(echo $TOOL_VERSION | tr @ /)

METEOR_DEV_BUNDLE=$(readlink -f "$HOME/.meteor/packages/$TOOLDIR/mt-os.linux.x86_64/dev_bundle")


if [ ! -e "$METEOR_DEV_BUNDLE/bin/node" ]; then
  echo "Meteor installation is not laid out like I expected." >&2
  echo "This tool requires Meteor version 0.9.0 or newer." >&2
  exit 1
fi

if [ ! -e .meteor/release ]; then
  echo "This directory does not appear to contain a Meteor application." >&2
  exit 1
fi

if [ $# = 0 ]; then
  echo "Missing command. Try: $0 help" >&2
  exit 1
fi

 # We replace the normal meteor start.js with our own version, which allows us
 # to support Sandstorm operations such as updating a live grain. Both start.js
 # and packages.json to install it correctly are embedded in this shell script
 # in order for it to be standalone.

 writeStartJs() {
   base64 -d >$DEPS_DIR/start.js <<< 
 }

 writePackageJson() {
   base64 -d >$DEPS_DIR/package.json <<<ewogICJuYW1lIjogIm1ldGVvci1zcGstc3RhcnQiLAogICJ2ZXJzaW9uIjogIjAuMS4wIiwKICAiZGVzY3JpcHRpb24iOiAiIyMgSW50cm9kdWN0aW9uIiwKICAibWFpbiI6ICJzdGFydC5qcyIsCiAgInJlcG9zaXRvcnkiOiB7CiAgICAidHlwZSI6ICJnaXQiLAogICAgInVybCI6ICJnaXQraHR0cHM6Ly9naXRodWIuY29tL2dpc2NoZXIvbWV0ZW9yLXNway5naXQiCiAgfSwKICAibGljZW5zZSI6ICJJU0MiLAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiZXM2LXByb21pc2UiOiAifjMuMCIsCiAgICAibW9uZ29kYiI6ICJeMi4yLjM2IgogIH0KfQo=
 }
COMMAND=$1
shift
copyDep() {
  # Copies a file from the system into the chroot.
  local FILE=$1
  local DST=.meteor-spk/deps"${FILE/#\/usr\/local/\/usr}"

  if [ -e "$DST" ]; then
    # already copied
    :
  elif [[ "$FILE" == /etc/* ]]; then
    # We'll want to copy configuration (e.g. for DNS) from the host at runtime.
    if [ -f "$FILE" ]; then
      echo "$FILE" >> tmp/etc.list
    fi
    # Symbolic link.
    # We copy over the target, and recreate the link.
    # Currently we denormalize the link because I'm not sure how to follow
    # one link at a time in bash (since readlink without -f gives a relative
    # path and I'm not sure how to interpret that against the link's path).
    # I'm sure there's a way, but whatever...
    mkdir -p $(dirname "$DST")
    local LINK=$(readlink -f "$FILE")
    ln -sf "${LINK/#\/usr\/local/\/usr}" "$DST"
    copyDep "$LINK"
  elif [ -d "$FILE" ]; then
    # Directory.  Make it, but don't copy contents; we'll do that later.
    mkdir -p "$DST"
  elif [ -f "$FILE" ]; then
    # Regular file.  Copy it over.
    mkdir -p $(dirname "$DST")
    cp "$FILE" "$DST"
  fi
}

copyDeps() {
  # Reads filenames on stdin and copies them into the chroot.

  while read FILE; do
    copyDep "$FILE"
  done
}


makedotdir() {
  rm -rf $DEPS_DIR
  mkdir -p $DEPS_DIR
  # copy over the sandstorm files
  mkdir -p $DEPS_DIR/programs/server/node_modules
  writeStartJs
  writePackageJson
  echo "Done writing packages"
  # install all the modules the start script needs
  export NPM_CONFIG_PREFIX=$METEOR_DEV_BUNDLE
  export NPM_CONFIG_NODEDIR=$METEOR_DEV_BUNDLE
  (cd $DEPS_DIR && PATH=$PATH:$METEOR_DEV_BUNDLE/bin npm install)

  cp /opt/sandstorm/latest/node_modules/{capnp.node,capnp.js} $DEPS_DIR/programs/server/node_modules
  cp -r /opt/sandstorm/latest/usr/include/{capnp,sandstorm} $DEPS_DIR/programs/server/node_modules
  # Copy over key binaries.
  mkdir -p $DEPS_DIR/bin
  echo "Copying $METEOR_DEV_BUNDLE/mongodb/bin/mongod to $DEPS_DIR/bin/"
  cp $METEOR_DEV_BUNDLE/mongodb/bin/mongod $DEPS_DIR/bin/
  (cd $DEPS_DIR/bin && ln -s ./mongod niscud)
  cp $METEOR_DEV_BUNDLE/bin/node $DEPS_DIR/bin
  (ldd $DEPS_DIR/bin/* $(find $DEPS_DIR -name '*.node' || true) | grep -o '[[:space:]]/[^ ]*') | copyDeps
}

bundle() {
  makedotdir

  echo "Building Meteor app..."
  meteor npm install
  meteor build --directory .meteor-spk
  (cd .meteor-spk/bundle/programs/server && meteor npm install)
  #cp -r $DEPS_DIR/* .meteor-spk/bundle
}

case "$COMMAND" in
  init )
    makedotdir
    spk init -p 4000 -I$DEPS_DIR -I.meteor-spk/bundle -A "$@" -- node start.js
    if [ -e .git ]; then
      cat >> .gitignore << __EOF__
.meteor-spk
__EOF__
    fi
    ;;
  dev )
    bundle
    spk dev "$@"
    ;;
  pack )
    bundle
    spk pack "$@"
    ;;
  clean )
    rm -rf .meteor-spk/bundle
    rm -rf .meteor-spk/deps
    ;;
  dev_bundle )
    echo $METEOR_DEV_BUNDLE
    ;;
  help )
    cat << __EOF__
$0 is much like Sandstorm's standard 'spk' tool except that it includes some
Meteor-specific shortcuts. In particular:
- You don't need to pass any arguments to 'init'.
- You don't need to worry about setting up a source map to define what is in
  your package. The 'dev' and 'pack' commands will automatically bundle your
  Meteor app together with everything that is needed.
__EOF__
    ;;
  * )
    spk "$COMMAND" "$@"
    ;;
esac
